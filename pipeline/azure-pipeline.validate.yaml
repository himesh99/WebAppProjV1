# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- codefix*
- feature*

parameters:
- name: environments
  type: object
  default:
    - name: development
      dependsOnEnv: ""
    - name: production
      dependsOnEnv: "development"
      
pool:
  vmImage: ubuntu-latest

variables:
  workingDirectory: $(System.DefaultWorkingDirectory)/terraform
  tfversion: '1.7.1'
  backendServiceArm: 'UKDDC_Azure_Subscription'
  backendAzureRmResourceGroupName: 'patelh-sandbox-rg'
  backendAzureRmStorageAccountName: 'sahpstatevuks'
  backendAzureRmContainerName: 'tfstatefiles'
  backendAzureRmKey: 'terraform.tfstate'
  environmentServiceNameAzureRM: 'UKDDC_Azure_Subscription'

stages:
- ${{ each env in parameters.environments }}:
  - stage: Terraform_Init_${{ env.name }}
    displayName: Terraform Plan ${{ env.name }}
    jobs:
      - job: ${{ replace(env.name, ' ', '_') }}_Environment
        steps:
          - template: ../template/terraform.validation.yaml
            parameters:
              environmentServiceNameAzureRM: ${{ variables.environmentServiceNameAzureRM }}
              backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}${{env.name}}
              backendAzureRmResourceGroupName: ${{variables.backendAzureRmResourceGroupName}}
              backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}${{env.name}}
              backendAzureRmKey: ${{ variables.backendAzureRmKey }}
              tfversion: ${{ variables.tfversion }}
              backendServiceArm: ${{ variables.backendServiceArm }}
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform
              tfVarsFile: $(System.DefaultWorkingDirectory)/terraform/envs/${{env.name}}.tfvars 

