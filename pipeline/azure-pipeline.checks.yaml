trigger:
- main

pr:
- none

parameters:
- name: environments
  type: object
  default:
    - name: development

pool:
  vmImage: ubuntu-latest

variables:
  backendServiceArm: 'UKDDC_Azure_Subscription'
  environment: 'development'


stages:
  - stage: Terraform_Init_Development
    displayName: Terraform Init Development
    jobs:
      - job: Development_Environment
        steps:
          - template: ../template/terraform.plan-apply.yaml
            parameters:
              environmentServiceNameAzureRM: ${{ variables.environmentServiceNameAzureRM }}
              env: ${{ variables.environment }}
              backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
              backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}${{variables.environment}}
              backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}${{variables.environment}}
              backendAzureRmKey: ${{ variables.backendAzureRmKey }}
              tfversion: ${{ variables.tfversion }}
              backendServiceArm: ${{ variables.backendServiceArm }}
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform
              tfVarsFile: $(System.DefaultWorkingDirectory)/terraform/envs/${{variables.environment}}.tfvars 
              checks: -var-file=../config/checks.tfvars

  - stage: Terraform_Run_Checks
    jobs:
      - job: Dev_Checks
        steps:
        - task: AzureCLI@2
          displayName: Run checks
          inputs:
            azureSubscription: "${{ variables.backendServiceArm }}"
            scriptType: "bash"
            scriptLocation: "inlineScript"
            inlineScript: |
              # export TF_LOG="TRACE"
              az account show
              terraform apply -auto-approve
              workingDirectory: "$(System.DefaultWorkingDirectory)/checks" 
              commandOptions: "-var-file=../config/checks.tfvars -lock=false"   