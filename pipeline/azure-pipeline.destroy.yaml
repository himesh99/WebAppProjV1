trigger:
- none

parameters:
- name: environments
  type: object
  default:
    - name: dev
      dependsOnEnv: ""
    - name: prod
      dependsOnEnv: "dev"

pool:
  vmImage: 'ubuntu-latest'

variables:
  workingDirectory: $(System.DefaultWorkingDirectory)/terraform
  tfversion: '1.7.1'
  backendServiceArm: 'UKDDC_Azure_Subscription'
  backendAzureRmResourceGroupName: 'patelh-sandbox-rg'
  backendAzureRmStorageAccountName: 'sahpstatevuks'
  backendAzureRmContainerName: 'tfstatefiles'
  backendAzureRmKey: 'terraform.tfstate'
  environmentServiceNameAzureRM: 'UKDDC_Azure_Subscription'

stages:
- ${{ each env in parameters.environments }}:
  - stage: Wait_${{env.name}}
    displayName: '${{env.name}} Waiting for Approval'
    condition: succeeded('Terraform_Init_${{ env.name }}')
    dependsOn: Terraform_Init_${{ env.name }}
    jobs:
      - job: waitForValidation
        displayName: '${{env.name}} Wait for external validation'
        pool: server
        timeoutInMinutes: 180 # task times out in 3 hours
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 120 # task times out in 2 hours
          inputs:
            instructions: 'Please validate the Terraform Plan for ${{env.name}} environment to resume'
            onTimeout: 'reject'
            
  - stage: Terraform_Init_${{ env.name }}
    displayName: Terraform Init ${{ env.name }}
    jobs:
      - job: ${{ replace(env.name, ' ', '_') }}_Environment
        steps:
        - task: TerraformTaskV4@4
          inputs:
            provider: 'azurerm'
            command: 'init'
            environmentServiceNameAzureRM: 'UKDDC_Azure_Subscription'
            workingDirectory: $(System.DefaultWorkingDirectory)/terraform
            tfversion: '1.7.1'
            backendServiceArm: ${{ variables.backendServiceArm }}
            backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
            backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}${{env.name}}
            backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}${{env.name}}
            backendAzureRmKey: ${{ variables.backendAzureRmKey }}
              

  - stage: Terraform_Destroy_${{ env.name }}
    displayName: Terraform Destroy ${{ env.name }}
    condition: succeeded('Wait_${{ env.name }}')
    dependsOn: Wait_${{ env.name }}
    jobs:
      - job: ${{ replace(env.name, ' ', '_') }}_Environment
        steps: 
        - task: TerraformTaskV4@4
          inputs:
            provider: 'azurerm'
            command: 'destroy'
            environmentServiceNameAzureRM: 'UKDDC_Azure_Subscription'
            workingDirectory: $(System.DefaultWorkingDirectory)/terraform
            tfversion: '1.7.1'
            backendServiceArm: ${{ variables.backendServiceArm }}
            backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
            backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}${{env.name}}
            backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}${{env.name}}
            backendAzureRmKey: ${{ variables.backendAzureRmKey }}
              