# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pr:
- none

pool:
  vmImage: ubuntu-latest

parameters:
  - name: environments
    type: string
    default: 'development'

variables:
  tfversion: '1.7.1'
  backendServiceArm: 'UKDDC_Azure_Subscription'
  backendAzureRmResourceGroupName: 'patelh-sandbox-rg'
  backendAzureRmStorageAccountName: 'sahpstatevuks01'
  backendAzureRmContainerName: 'tfstatefiles'
  backendAzureRmKey: 'terraform.tfstate'
  environmentServiceNameAzureRM: 'UKDDC_Azure_Subscription'
 
stages:
#- ${{ each env in parameters.environments }}:
  - stage: Terraform_Init_${{ parameters.environments }}
    displayName: Terraform Plan ${{  parameters.environments }}
    condition: and(succeeded(), or(eq('${{ parameters.environments }}', ''), succeeded('Terraform_Apply_${{ parameters.dependsOnEnv }}')))
    jobs:
      - job: ${{ replace(parameters.environments, ' ', '_') }}_Environment
        steps:
          - template: ../template/terraform.validation.yaml
          - template: ../template/vairables/variables-${{parameters.env}}.yaml
            parameters:
              environmentServiceNameAzureRM: ${{ variables.environmentServiceNameAzureRM }}
              backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
              backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
              backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
              backendAzureRmKey: ${{ variables.backendAzureRmKey }}
              tfversion: ${{ variables.tfversion }}
              backendServiceArm: ${{ variables.backendServiceArm }}
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform
              tfVarsFile: $(System.DefaultWorkingDirectory)/terraform/envs/${{parameters.environments}}.tfvars 
              environments: ${{variables.env}}
              
              
              
  - stage: Wait_${{parameters.environments}}
    displayName: '${{parameters.environments}} Waiting for Approval'
    condition: succeeded('Terraform_Init_${{ parameters.environments }}')
    dependsOn: Terraform_Init_${{ parameters.environments }}
    jobs:
      - job: waitForValidation
        displayName: '${{parameters.environments}} Wait for external validation'
        pool: server
        timeoutInMinutes: 300 # job times out in 5 hours
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 240 # task times out in 4 hour
          inputs:
            instructions: 'Please validate the Terraform Plan for ${parameters.environments}} environment to resume'
            onTimeout: 'reject'

  - stage: Terraform_Apply_${{ parameters.environments }}
    displayName: Terraform Apply ${{ parameters.environments }}
    condition: succeeded('Wait_${{ parameters.environments }}')
    dependsOn: Wait_${{ parameters.environments }}
    jobs:
      - job: ${{ replace(parameters.environments, ' ', '_') }}_Environment
        steps:
          - template: ../template/terraform.plan-apply.yaml
          - template: ../template/vairables/variables-${{parameters.env}}.yaml
            parameters:
              environmentServiceNameAzureRM: ${{ variables.environmentServiceNameAzureRM }}
              backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
              backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
              backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
              backendAzureRmKey: ${{ variables.backendAzureRmKey }}
              tfversion: ${{ variables.tfversion }}
              backendServiceArm: ${{ variables.backendServiceArm }}
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform    
              tfVarsFile: $(System.DefaultWorkingDirectory)/terraform/envs/${{parameters.environments}}.tfvars
              environments: ${{variables.env}}