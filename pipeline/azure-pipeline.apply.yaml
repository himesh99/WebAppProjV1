# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pr:
- none

pool:
  vmImage: ubuntu-latest

parameters:
- name: environments
  type: object
  default:
    - name: development
      dependsOnEnv: ""
    - name: production
      dependsOnEnv: "development"

variables:
  tfversion: '1.7.1'
  backendServiceArm: 'UKDDC_Azure_Subscription'
  backendAzureRmResourceGroupName: 'patelh-sandbox-rg'
  backendAzureRmStorageAccountName: 'sahpstatevuks'
  backendAzureRmContainerName: 'tfstatefiles'
  backendAzureRmKey: 'terraform.tfstate'
  environmentServiceNameAzureRM: 'UKDDC_Azure_Subscription'
 
stages:
- ${{ each env in parameters.environments }}:
  - stage: Terraform_Init_${{ env.name }}
    displayName: Terraform Plan ${{ env.name }}
    condition: and(succeeded(), or(eq('${{ env.dependsOnEnv }}', ''), succeeded('Terraform_Apply_${{ env.dependsOnEnv }}')))
    jobs:
      - job: ${{ replace(env.name, ' ', '_') }}_Environment
        steps:
          - template: ../template/terraform.validation.yaml
            parameters:
              environmentServiceNameAzureRM: ${{ variables.environmentServiceNameAzureRM }}
              env: ${{ env.name }}
              backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
              backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}${{env.name}}
              backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}${{env.name}}
              backendAzureRmKey: ${{ variables.backendAzureRmKey }}
              tfversion: ${{ variables.tfversion }}
              backendServiceArm: ${{ variables.backendServiceArm }}
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform
              tfVarsFile: $(System.DefaultWorkingDirectory)/terraform/envs/${{env.name}}.tfvars 

  - stage: Wait_${{env.name}}
    displayName: '${{env.name}} Waiting for Approval'
    condition: succeeded('Terraform_Init_${{ env.name }}')
    dependsOn: Terraform_Init_${{ env.name }}
    jobs:
      - job: waitForValidation
        displayName: '${{env.name}} Wait for external validation'
        pool: server
        timeoutInMinutes: 300 # job times out in 5 hours
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 240 # task times out in 4 hour
          inputs:
            instructions: 'Please validate the Terraform Plan for ${{env.name}} environment to resume'
            onTimeout: 'reject'

  - stage: Terraform_Apply_${{ env.name }}
    displayName: Terraform Apply ${{ env.name }}
    condition: succeeded('Wait_${{ env.name }}')
    dependsOn: Wait_${{ env.name }}
    jobs:
      - job: ${{ replace(env.name, ' ', '_') }}_Environment
        steps:
          - template: ../template/terraform.plan-apply.yaml
            parameters:
              environmentServiceNameAzureRM: ${{ variables.environmentServiceNameAzureRM }}
              backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
              backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}${{env.name}}
              backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}${{env.name}}
              backendAzureRmKey: ${{ variables.backendAzureRmKey }}
              tfversion: ${{ variables.tfversion }}
              backendServiceArm: ${{ variables.backendServiceArm }}
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform    
              tfVarsFile: $(System.DefaultWorkingDirectory)/terraform/envs/${{env.name}}.tfvars   
              env: #${{ parameters.env }}    
                TF_VAR_az_subscription_id: $(TF_VAR_az_subscription_id)
                TF_VAR_env: ${{ parameters.env }}  
            