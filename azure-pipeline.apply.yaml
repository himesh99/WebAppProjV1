# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: ubuntu-latest

parameters:
- name: environments
  type: object
  default:
    - name: hptest
      dependsOnEnv: ""
    - name: hpprod
      dependsOnEnv: "hptest"
    
stages: 
# Terraform Init and Plan Stage
- stage: initandplan
  displayName: Terraform Init and Plan
  jobs:
    - ${{ each env in parameters.environments }}:
      - job: terraformPlan_${{ env.name }}
        displayName: Terraform Init and Plan for ${{ env.name }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: TerraformTaskV4@4
                  displayName: terraform init for ${{ env.name }}
                  inputs:
                    provider: 'azurerm'
                    command: 'init'
                    backendServiceArm: 'UKDDC_Azure_Subscription'
                    backendAzureRmResourceGroupName: 'patelh-sandbox-rg'
                    backendAzureRmStorageAccountName: 'sahpstatevuks01'
                    backendAzureRmContainerName: 'tfstatefiles'
                    backendAzureRmKey: 'terraform.tfstate'

                - task: TerraformTaskV4@4
                  displayName: terraform plan for ${{ env.name }}
                  inputs:
                    provider: 'azurerm'
                    command: 'plan'
                    environmentServiceNameAzureRM: 'UKDDC_Azure_Subscription'
                    backendAzureRmResourceGroupName: 'patelh-sandbox-rg'

# Terraform Apply Stage
- stage: TerraformApply
  displayName: Terraform Apply
  jobs:
    - ${{ each env in parameters.environments }}:
      - job: terraformApply_${{ env.name }}
        displayName: Terraform Apply for ${{ env.name }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: TerraformTaskV4@4
                  displayName: terraform init for ${{ env.name }}
                  inputs:
                    provider: 'azurerm'
                    command: 'init'
                    backendServiceArm: 'UKDDC_Azure_Subscription'
                    backendAzureRmResourceGroupName: 'patelh-sandbox-rg'
                    backendAzureRmStorageAccountName: 'sahpstatevuks01'
                    backendAzureRmContainerName: 'tfstatefiles'
                    backendAzureRmKey: 'terraform.tfstate'

                - task: TerraformTaskV4@4
                  displayName: terraform plan for ${{ env.name }}
                  inputs:
                    provider: 'azurerm'
                    command: 'plan'
                    environmentServiceNameAzureRM: 'UKDDC_Azure_Subscription'
                    backendAzureRmResourceGroupName: 'patelh-sandbox-rg'

                - task: TerraformTaskV4@4
                  displayName: terraform apply for ${{ env.name }}
                  inputs:
                    provider: 'azurerm'
                    command: 'apply'
                    environmentServiceNameAzureRM: 'UKDDC_Azure_Subscription'
                    backendAzureRmResourceGroupName: 'patelh-sandbox-rg'
