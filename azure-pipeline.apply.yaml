# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: ubuntu-latest

stages: 
- stage: initandplan 
  displayName: Terraform Init and Plan 
  jobs: 
  - deployment: terraformplan 
    displayName: Terraform Init and Plan 
    # creates an environment if it doesn't already exist 
    environment: 'hpvalidation' 
    strategy: 
      runOnce: 
        deploy: 
          steps:
          - checkout: self
          - task: TerraformTaskV4@4
            displayName: terraform init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'UKDDC_Azure_Subscription'
              backendAzureRmResourceGroupName: 'patelh-sandbox-rg'
              backendAzureRmStorageAccountName: 'sahpstatevuks01'
              backendAzureRmContainerName: 'tfstatefiles'
              backendAzureRmKey: 'terraform.tfstate'

          - task: TerraformTaskV4@4
            displayName: terraform plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: 'UKDDC_Azure_Subscription'
              backendAzureRmResourceGroupName: 'patelh-sandbox-rg'

- stage: Terraform Apply 
  displayName: Terraform Apply 
  jobs: 
  - deployment: terraformapply 
    displayName: Terraform Apply 
    environment: 'hpprod' 
    strategy: 
      runOnce: 
        deploy: 
          steps: 
          - checkout: self 
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'apply'
              environmentServiceNameAzureRM: 'UKDDC_Azure_Subscription'
              backendAzureRmResourceGroupName: 'patelh-sandbox-rg'