# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: ubuntu-latest

parameters:
- name: environments
  type: object
  default:
    - name: hpdev
      dependsOnEnv: ""
    - name: hpprod
      dependsOnEnv: "hpdev"

variables:
  tfversion: '1.7.1'
  backendServiceArm: 'UKDDC_Azure_Subscription'
  backendAzureRmResourceGroupName: 'patelh-sandbox-rg'
  backendAzureRmStorageAccountName: 'sahpstatevuks01'
  backendAzureRmContainerName: 'tfstatefiles'
  backendAzureRmKey: 'terraform.tfstate'
  environmentServiceNameAzureRM: 'UKDDC_Azure_Subscription'
 
stages:
- ${{ each env in parameters.environments }}:
  - stage: Terraform_Init_${{ env.name }}
    displayName: Terraform Init for ${{ env.name }}
    condition: and(succeeded(), or(eq('${{ env.dependsOnEnv }}', ''), succeeded('Terraform_Apply_${{ env.dependsOnEnv }}')))
    jobs:
      - job: terraformInit_${{ env.name }}
        displayName: Terraform Init for ${{ env.name }}
        steps:
          - template: template/terraform.validation.yaml
            parameters:
              environmentServiceNameAzureRM: ${{ variables.environmentServiceNameAzureRM }}
              backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
              backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
              backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
              backendAzureRmKey: ${{ variables.backendAzureRmKey }}
              environmentServiceNameAzureRM: ${{ variables.environmentServiceNameAzureRM }}
              

  - stage: Terraform_Apply_${{ env.name }}
    displayName: Terraform Plan/Apply for ${{ env.name }}
    condition: succeeded('Terraform_Init_${{ env.name }}')
    jobs:
      - deployment: terraformDeploy_${{ env.name }}
        displayName: Terraform Deploy for ${{ env.name }}
        environment: ${{ env.name }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - template: template/terraform.plan-apply.yaml
                  parameters:
                    environmentServiceNameAzureRM: ${{ variables.environmentServiceNameAzureRM }}
                    backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
