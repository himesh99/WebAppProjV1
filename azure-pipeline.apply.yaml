# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: ubuntu-latest

parameters:
- name: environments
  type: object
  default:
    - name: hpdev
      dependsOnEnv: ""
    - name: hpprod
      dependsOnEnv: "hpdev"

variables:
  tfversion: '1.7.1'
  backendServiceArm: 'UKDDC_Azure_Subscription'
  backendAzureRmResourceGroupName: 'patelh-sandbox-rg'
  backendAzureRmStorageAccountName: 'sahpstatevuks01'
  backendAzureRmContainerName: 'tfstatefiles'
  backendAzureRmKey: 'terraform.tfstate'
  environmentServiceNameAzureRM: 'UKDDC_Azure_Subscription'
  backendAzureRmResourceGroupName: 'patelh-sandbox-rg'

stages: 
# Terraform Init and Plan Stage
- stage: tfinit
  displayName: Terraform Init 
  jobs:
    - ${{ each env in parameters.environments }}:
      - deployment: terraformPlan_${{ env.name }}  # This is a deployment job
        displayName: Terraform Init and Plan for ${{ env.name }}
        environment: ${{ env.name }}  # Automatically creates an environment if it doesn't exist
        strategy:
          runOnce:  # Correct usage of runOnce under a deployment job
            deploy:
              steps:
                - template: template/terraform.validation.yaml
                  parameters:
                    tfversion: ${{ variables.tfversion }}
                    backendServiceArm: ${{ variables.backendServiceArm }}
                    backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
                    backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
                    backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
                    backendAzureRmKey: ${{ variables.backendAzureRmKey }}
               

# Terraform Apply Stage
- stage: TerraformPlanApply
  displayName: Terraform Plan and Apply
  jobs:
    - ${{ each env in parameters.environments }}:
      - deployment: terraformApply_${{ env.name }}  # Deployment job for apply
        displayName: Terraform Apply for ${{ env.name }}
        environment: ${{ env.name }}  # Automatically creates an environment if it doesn't exist
        strategy:
          runOnce:  # Correct usage of runOnce under a deployment job
            deploy:
              steps:
                - checkout: self
                - task: TerraformTaskV4@4
                  displayName: terraform init for ${{ env.name }}
                  inputs:
                    provider: 'azurerm'
                    command: 'init'
                    backendServiceArm: 'UKDDC_Azure_Subscription'
                    backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
                    backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
                    backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
                    backendAzureRmKey: ${{ variables.backendAzureRmKey }}

                - task: TerraformTaskV4@4
                  displayName: terraform plan for ${{ env.name }}
                  template: template/terraform.plan-apply.yaml
                  parameters:
                    environmentServiceNameAzureRM: ${{ variables.environmentServiceNameAzureRM }}
                    backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}

                - task: TerraformTaskV4@4
                  displayName: terraform apply for ${{ env.name }}
                  template: template/terraform.plan-apply.yaml
                  parameters:
                    environmentServiceNameAzureRM: ${{ variables.environmentServiceNameAzureRM }}
                    backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
