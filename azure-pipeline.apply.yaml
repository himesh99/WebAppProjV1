# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: ubuntu-latest

parameters:
- name: environments
  type: object
  default:
    - name: hpdev
      dependsOnEnv: ""
    - name: hpprod
      dependsOnEnv: "hpdev"

variables:
  tfversion: '1.7.1'
  backendServiceArm: 'UKDDC_Azure_Subscription'
  backendAzureRmResourceGroupName: 'patelh-sandbox-rg'
  backendAzureRmStorageAccountName: 'sahpstatevuks01'
  backendAzureRmContainerName: 'tfstatefiles'
  backendAzureRmKey: 'terraform.tfstate'
  environmentServiceNameAzureRM: 'UKDDC_Azure_Subscription'
 
stages:
- ${{ each env in parameters.environments }}:
  - stage: Terraform_Init_${{ env.name }}
    displayName: Terraform Init and Plan for ${{ env.name }}
    condition: and(succeeded(), or(eq('${{ env.dependsOnEnv }}', ''), succeeded('Terraform_Apply_${{ env.dependsOnEnv }}')))
    jobs:
      - job: terraformInit_${{ env.name }}
        displayName: Terraform Init and Plan ${{ env.name }}
        steps:
          - template: template/terraform.validation.yaml
            parameters:
              environmentServiceNameAzureRM: ${{ variables.environmentServiceNameAzureRM }}
              backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
              backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
              backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
              backendAzureRmKey: ${{ variables.backendAzureRmKey }}
              tfversion: ${{ variables.tfversion }}
              backendServiceArm: ${{ variables.backendServiceArm }}
              
  - stage: Wait${{env.name}}
    displayName: '${{env.name}} Waiting for Approval'
    condition: succeeded()
    dependsOn: Plan${{env.name}}
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: waitForValidation
        displayName: '${{env.name}} Wait for external validation'
        pool: server
        timeoutInMinutes: 4320 # job times out in 3 days
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 1440 # task times out in 1 day
          inputs:
            instructions: 'Please validate the Terraform Plan for ${{env.name}} environment to resume'
            onTimeout: 'reject'

    - stage: Terraform_Apply_${{ env.name }}
      displayName: Terraform Apply ${{ env.name }}
      condition: succeeded('Terraform_Init_${{ env.name }}')
      jobs:
        - deployment: terraformDeploy_${{ env.name }}
          displayName: Terraform Deploy for ${{ env.name }}
          environment: ${{ env.name }}
          strategy:
            runOnce:
              deploy:
                steps:
                  - checkout: self
                  - template: template/terraform.plan-apply.yaml
                    parameters:
                      environmentServiceNameAzureRM: ${{ variables.environmentServiceNameAzureRM }}
                      backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
                      backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
                      backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
                      backendAzureRmKey: ${{ variables.backendAzureRmKey }}
                      tfversion: ${{ variables.tfversion }}
                      backendServiceArm: ${{ variables.backendServiceArm }}
    
